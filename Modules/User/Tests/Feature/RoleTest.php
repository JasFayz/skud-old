<?php

namespace Modules\User\Tests\Feature;

use Illuminate\Contracts\Auth\Authenticatable;
use Modules\User\Entities\Permission;
use Modules\User\Entities\Role;
use Modules\User\Entities\User;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;

class RoleTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    private User $admin;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->admin = User::factory()->create()->assignRole('admin_security');
    }

    public function test_only_auth_user_can_see_role_page()
    {

        $this->actingAs($this->admin);

        $response = $this->get('/admin/role');

        $response->assertStatus(200);
    }

    public function test_admin_can_create_role()
    {
        $this->actingAs($this->admin);

        $requestData = [
            'name' => $this->faker->word(),
            'label' => $this->faker->words(2, true),
            'grade' => 6,
            'permissions' => Permission::query()->inRandomOrder()->take(10)->get()->pluck('id')->toArray()
        ];

        $response = $this->postJson('/api/role/create', $requestData);

        $response->assertOk();
        $this->assertDatabaseHas('roles', [
            'name' => $requestData['name']
        ]);
    }

    public function test_admin_can_update_role()
    {
        $this->actingAs($this->admin);

        $role = Role::create(['name' => $this->faker->word, 'label' => $this->faker->words(2, true)]);

        $response = $this->putJson('/api/role/' . $role->id . '/update', [
            'name' => 'changed.name',
            'label' => 'Changed name',
            'grade' => 6
        ]);

        $response->assertOk();

        $this->assertEquals(Role::findById($role->id)->name, 'changed.name');

    }

    public function test_admin_can_delete_role()
    {
        $this->actingAs($this->admin);
        $role = Role::create([
            'name' => 'changed.name',
            'label' => 'Changed name',
            'grade' => 6
        ]);

        $response = $this->delete('/api/role/' . $role->id . '/delete');
        $response->assertOk();

        $this->assertModelMissing($role);
    }

    public function test_user_can_not_create_role()
    {
        $this->actingAs(User::factory()->create()->assignRole('user'));

        $requestData = [
            'name' => $this->faker->word(),
            'label' => $this->faker->words(2, true),
            'grade' => 6,
            'permissions' => Permission::query()->inRandomOrder()->take(10)->get()->pluck('id')->toArray()
        ];

        $response = $this->postJson('/api/role/create', $requestData);

        $response->assertStatus(403);

    }
}
