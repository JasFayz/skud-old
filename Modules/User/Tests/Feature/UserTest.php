<?php

namespace Modules\User\Tests\Feature;

use Illuminate\Foundation\Testing\WithFaker;
use Modules\Skud\Entities\Company;
use Modules\User\Database\Seeders\PermissionTableSeeder;
use Modules\User\Entities\PermissionGroup;
use Modules\User\Entities\Role;
use Modules\User\Entities\User;
use Tests\TestCase;

use Illuminate\Foundation\Testing\RefreshDatabase;

class UserTest extends TestCase
{
    use  RefreshDatabase, WithFaker;

    private Company $company;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->company = Company::factory()->create();
    }


    public function test_only_auth_user_can_see_page()
    {
        $response = $this->get('/admin/user');

        $response->assertRedirect('/login');
    }

    public function test_only_admin_can_see_user_page()
    {
        $adminSecurity = User::factory()->create()->assignRole('admin_security');
        $this->actingAs($adminSecurity);
        $responseAsAdmin = $this->get('/admin/user');
        $responseAsAdmin->assertOk();

        $user = User::factory()->create()->assignRole('user');
        $this->actingAs($user);
        $responseAsUser = $this->get('/admin/user');
        $responseAsUser->assertStatus(403);
    }

    public function test_admin_can_create_user()
    {
        $admin = User::factory()->create()->assignRole('admin_security');
        $this->actingAs($admin);

        $requestData = [
            'first_name' => $this->faker->firstName,
            'last_name' => $this->faker->lastName,
            'email' => $this->faker->unique()->safeEmail(),
            'company_id' => $this->company->id,
            'role_id' => Role::query()->inRandomOrder()->first()->id
        ];

        $response = $this->postJson('/api/user', $requestData);

        $response->assertOk();

        $this->assertDatabaseHas('users', [
            'email' => $requestData['email']
        ]);
    }

    public function test_admin_can_update_user()
    {
        $admin = User::factory()->create()->assignRole('admin_security');
        $this->actingAs($admin);

        $user = User::factory()->create()->assignRole('admin_security');
        $email = $this->faker->unique()->safeEmail();

        $response = $this->putJson('/api/user/' . $user->id, [
            'email' => $email
        ]);

        $response->assertOk();
        $this->assertEquals(User::find($user->id)->email, $email);

    }

    public function test_admin_can_delete_user()
    {
        $admin = User::factory()->create()->assignRole('admin_security');
        $this->actingAs($admin);

        $user = User::factory()->create()->assignRole('user');

        $response = $this->delete('/api/user/' . $user->id);

        $response->assertOk();

        $this->assertSoftDeleted($user);
    }

}
